@*@inject SService SService*@
@inject IndexedDbContext IndexedDbContext

@inherits SharedBaseComponent

<h4 class="m-0">ImageViewComponent</h4>

<p class="m-0">Current count: @SService.Count</p>

@if (SService.imgUrl != string.Empty)
{
    <div class="d-flex justify-content-center p-4">
        <img src="@SService.imgUrl" alt="placeholder1" height="400">
    </div>
}
else
{
    // brak obrazka
    <p>No image available</p>
}
@code {

    //string imgUrl = string.Empty;

    protected override void OnInitialized()
    {
        SService.OnChange += StateHasChanged;
    }

    public async Task OnFileUpload(InputFileChangeEventArgs e)
    {
        SService.imageFile = e.File;
        SService.imageArray = new byte[SService.imageFile.Size];
        Console.WriteLine(1);
        await SService.imageFile.OpenReadStream(1024*1024*10).ReadAsync(SService.imageArray);
        Console.WriteLine(2);
        string imageType = SService.imageFile.ContentType;
        SService.imgUrl = $"data:{imageType};base64,{Convert.ToBase64String(SService.imageArray)}";
        Console.WriteLine(3);
        await TestAttributes(SService.imageArray, SService.imageFile.Name);
        StateHasChanged();
        Console.WriteLine(4);
        //for (var i = 1; i <= 4; i++)
        //{
        //    Thread.Sleep(1000);
        //    Console.WriteLine($"5, {i}");
        //}
        //SService.LoadImage();
        //Console.WriteLine(4);
        //SService.imageStream = SService.imageFile.OpenReadStream(5120000);
        //SService.imageResult = Image.Load(SService.imageStream);
        //SService.imageResult = Image.Load(SService.imageArray);

        //var watch = new System.Diagnostics.Stopwatch();
        //watch.Start();
        //watch.Stop();
        //Console.WriteLine($"Execution Time: {watch.ElapsedMilliseconds} ms");
    }

    public List<ImageDto> GetImages(byte[] imageArr, string fileName)
    {
        var items = new List<ImageDto>
        {
            new ImageDto
            {
                ImageId = 1,
                ImageName = fileName,
                ImageArray = imageArr
            }
        };
        return items;
    }

    public async Task TestAttributes(byte[] imageArr, string fileName)
    {
        var itemsDb1 = GetImages(imageArr, fileName);
        var db1Result = await IndexedDbContext.OpenIndexedDb();
        if (db1Result != -1)
        {
            var db1Result1 = await IndexedDbContext.DeleteAll<ImageDto>();
        }
        var db1Result2 = await IndexedDbContext.AddItems<ImageDto>(itemsDb1);
        var db1Result5 = await IndexedDbContext.GetAll<ImageDto>();
        var db1Result6 = await IndexedDbContext.GetByKey<int, ImageDto>(1);
        var db1Result7 = await IndexedDbContext.GetByIndex<string, ImageDto>("pokoj1.png", null, "imageName", false);
        var db1Result10 = await IndexedDbContext.DeleteAll<ImageDto>();
        var db1Result11 = await IndexedDbContext.DeleteIndexedDb();
        Console.Write("after deletion");
    }
}
