@page "/editor3"
@inject StateService SService
@inject LocalStorageManager LSManager
@inject IndexedDbManager IDbManager
@inject IndexedDbContext IndexedDbContext
@inject NavigationManager NavigationManager

<div class="container-fluid bg-primary h-100">
	<div class="row bg-success h-100">
		<div class="col-md-9 bg-warning d-flex align-items-center justify-content-center h-100">
            @if(ImageName!=null && ImageName!="")
            {
                @*<img class="mw-100 mh-100" src="images/placeholder.svg" alt="Card image cap">*@
                <img class="mw-100 mh-100" height="500" src="images/cat01_500.jpg" alt="Card image cap"> 
                
                @*<SKCanvasView OnPaintSurface="@OnPaintSurface" IgnorePixelScaling="true" @attributes="CanvasAttributes" class="border mw-100 mh-100"/>*@
            }
            else
            {
                <div class="text-center">
                    <UploadImageComponent></UploadImageComponent>
                    <div class="btn btn-light my-2" @onclick='()=>NavigationManager.NavigateTo("imagelist2")'>Choose image from Image List</div>
                </div>
            }
		</div>
		<div class="col-md-3 bg-info">
			<Tools2Component></Tools2Component>
		</div>
	</div>
</div>

@code {
    // initialize imageName in local storage on startup
    public string? ImageName { get; set; }
    public ImageResized imageResized { get; set; }
    public SKBitmap sKBitmap { get; set; }

    private Dictionary<string, object> CanvasAttributes { get; set; } =
        new()
        {
            { "width", "500" },
            { "height", "500" }
        };

    protected override async Task OnInitializedAsync()
    {
        //ImageName = SService.ImageName;
        var openDbResult = await IndexedDbContext.OpenIndexedDb();
        ImageName = await LSManager.GetImageName();
        if(ImageName != null)
        {
            imageResized = await IDbManager.FetchImageResized(ImageName);
            if(imageResized != null)
            {
                sKBitmap = SKBitmap.Decode(imageResized.ImageArray);
            }
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine($"ImageName: {ImageName}");

        base.OnAfterRender(firstRender);
    }

    private void OnPaintSurface(SKPaintSurfaceEventArgs e)
    {
        var canvas = e.Surface.Canvas;

        canvas.Clear(SKColors.White);

        canvas.DrawBitmap(sKBitmap, new SKPoint(0,0));

    }

}
