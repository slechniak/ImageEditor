@page "/imagelist"

@inject StateService SService
@inject GridColumnDataIndexedDb2 GridColumnDataIndexedDb2

<h3>ImageListComponent</h3>
<h6>List of images</h6>
    <div class="card-deck">
        <div class="row">
            @if(thumbnailList.Count != 0 && imageDtoListResult.Count != 0)
             {
                <p>list is not empty</p>
                @for (int i = 0; i < imageDtoListResult.Count; i++)
                {
                <div class="col-4">
                    <div class="card">
                        <img class="card-img-top" src="@thumbnailList[i].Thumbnail" alt="Card image cap">
                        <div class="card-body">
                            <h5 class="card-title">@imageDtoListResult[i].ImageName</h5>
                            <p class="card-text">Image details</p>
                            <a href="#" class="btn btn-primary">Edit</a>
                            <a href="#" class="btn btn-primary">Save</a>
                            <a href="#" class="btn btn-primary">Delete</a>
                        </div>
                    </div>
                </div>
                }
             }
             else
             {
                 <p>list is empty</p>
             }
            <div class="col-4">
                <div class="card">
                    <img class="card-img-top" src="..." alt="Card image cap">
                    <div class="card-body">
                        <h5 class="card-title">Upload an image</h5>
                        <p class="card-text">Description</p>
                        <div class="custom-file">
                            @*<InputFile OnChange="OnFileUpload"/>*@
                            <label class="custom-file-label" for="customFile">Choose file</label>
                            <InputFile OnChange="OnFileUpload" class="custom-file-input" id="customFile"/>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

@code {

    List<ImageDto> imageDtoListResult = new List<ImageDto>();
    List<string> srcImageList = new List<string>();
    List<ImageInfo> thumbnailList = new List<ImageInfo>();

    // make list of thumbnail images(strings) from imageDtoListResult
    protected override async Task OnInitializedAsync()
    {
        //is it getting called after state has changed?
        //check first render - connection?
        var openDbResult = await GridColumnDataIndexedDb2.OpenIndexedDb();
        //imageDtoListResult = await GridColumnDataIndexedDb2.GetAll<ImageDto>();
        await SetImageDtoListIDb();
        //SetImageSrcList();
        await SetThumbnailListIDb();

        await base.OnInitializedAsync();
    }

    public void SetImageSrcList()
    {
        srcImageList = new List<string>();
        foreach(var imageDto in imageDtoListResult)
        {
            srcImageList.Add(GetImageSrc(imageDto));
        }
    }

    public string GetImageSrc(ImageDto imageDto)
    {
        //var db1Result6 = await GridColumnDataIndexedDb2.GetByKey<int, ImageDto>(1);
        string imgUrl = $"data:{imageDto.ImageType};base64,{Convert.ToBase64String(imageDto.ImageArray)}";
        //Console.WriteLine("image returned");

        return imgUrl;
    }

    public async Task SetImageDtoListIDb()
    {
        imageDtoListResult = await GridColumnDataIndexedDb2.GetAll<ImageDto>();
        Console.WriteLine("setimagedtolist ended");
    }

    public async Task SetThumbnailListIDb()
    {
        thumbnailList = await GridColumnDataIndexedDb2.GetAll<ImageInfo>();
        Console.WriteLine("setthumbnaillist ended");
    }

    // code from idbtest

    public async Task OnFileUpload(InputFileChangeEventArgs e)
    {
        IBrowserFile imageFile = e.File;
        byte[] imageArray = new byte[imageFile.Size];
        await imageFile.OpenReadStream(1024*1024*10).ReadAsync(imageArray);
        string imageType = imageFile.ContentType;
        int maxKey = await GridColumnDataIndexedDb2.GetMaxKey<int, ImageDto>();
        var imageDtoList = GetImageDto(imageArray, imageFile.Name, maxKey+1, imageType);
        var addedResult = await GridColumnDataIndexedDb2.AddItems<ImageDto>(imageDtoList);
        Console.WriteLine($"data added: {imageFile.Name}");
        var imageInfoList = GetImageInfo(GetThumbnail(imageArray, imageType), imageFile.Name, maxKey+1);
        var addedResult2 = await GridColumnDataIndexedDb2.AddItems<ImageInfo>(imageInfoList);
        //AddToThumbnailList(imageInfoList);
        await SetThumbnailListIDb();
        await SetImageDtoListIDb();
        //SetImageSrcList();
        StateHasChanged();
    }

    public List<ImageDto> GetImageDto(byte[] imageArr, string fileName, int maxKey, string imageType)
    {
        var items = new List<ImageDto>
        {
            new ImageDto
            {
                ImageId = maxKey,
                ImageName = fileName,
                ImageArray = imageArr,
                ImageType = imageType
            }
        };
        return items;
    }

    public void AddToThumbnailList(List<ImageInfo> imageInfoList)
    {
        foreach(var imageInfo in imageInfoList)
        {
            thumbnailList.Add(imageInfo);
        }
    }

    public List<ImageInfo> GetImageInfo(string imageSrc, string fileName, int key)
    {
        var items = new List<ImageInfo>
        {
            new ImageInfo
            {
                ImageId = key,
                ImageName = fileName,
                Thumbnail = imageSrc
            }
        };
        Console.WriteLine("getimageinfo ended");
        return items;
    }

    public string GetThumbnail(byte[] imageArray, string imageType, int width = 500)
    {
        string imgSrc;
        using(Image image = Image.Load(imageArray, out var imageFormat))
        {
            Console.WriteLine("loading ended");
            image.Mutate(x => x.AutoOrient());
            int height = (image.Height * width) / image.Width;
            image.Mutate(x => x.Resize(width, height).AutoOrient());
            Console.WriteLine("resizing ended");
            imgSrc = image.ToBase64String(imageFormat);
            //imgSrc = $"data:{imageType};base64,{Convert.ToBase64String(imageArray)}";
            Console.WriteLine("tobase64string ended");
        }
        Console.WriteLine("getthumbnail ended");
        return imgSrc;
    }

    //public async Task TestAttributesUpload(byte[] imageArr, string fileName, string imageType)
    //{
    //    var db1Result = await GridColumnDataIndexedDb2.OpenIndexedDb();
    //    var maxKey = await GridColumnDataIndexedDb2.GetMaxKey<int, ImageDto>();
    //    var itemsDb1 = GetImageDto(imageArr, fileName, maxKey, imageType);
    //    //if (db1Result != -1)
    //    //{
    //    //    var db1Result1 = await GridColumnDataIndexedDb2.DeleteAll<ImageDto>();
    //    //}
    //    var db1Result2 = await GridColumnDataIndexedDb2.AddItems<ImageDto>(itemsDb1);
    //    Console.WriteLine("data added");
    //}

}
