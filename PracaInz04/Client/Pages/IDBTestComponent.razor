@page "/idbtest"

@inject GridColumnDataIndexedDb2 GridColumnDataIndexedDb2

<h3>IDBTestComponent</h3>

@code {
	protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //await InlineKeys();
            await TestAttributes();
            //await InlineKeysPlusKeyGenerator();
            //await OutOfLinekeys();
            //await InlineKeysTwoDatabases();
            //await TestUpgrade();
        }
    }

    public List<ImageDto> GetImages()
    {
        var items = new List<ImageDto>
        {
            new ImageDto
            {
                ImageId = 11,
                ImageName = "image1.jpeg",
                ImageArray = new byte[] { 0,1,2,3}
            },
            new ImageDto
            {
                ImageId = 12,
                ImageName = "image2.png",
                ImageArray = new byte[] { 3,2,1,0}
            }
        };

        return items;
    }

    private async Task TestAttributes()
    {
        //var tableFieldService = new TableFieldService();
        //var imageService = new ImageService();

        var itemsDb1 = GetImages();

        var db1Result = await GridColumnDataIndexedDb2.OpenIndexedDb();

        if (db1Result != -1)
        {
            try
            {
                var db1Result1 = await GridColumnDataIndexedDb2.DeleteAll<ImageDto>();
            }
            catch(Exception ex)
            {
                Console.Write("Ex message: " + ex.Message);
            }
        }

        var db1Result2 = await GridColumnDataIndexedDb2.AddItems<ImageDto>(itemsDb1);

        //var db1Result3 = await GridColumnDataIndexedDb2.GetByKey<int, TableFieldDto>(11);

        //var db1Result4 = await GridColumnDataIndexedDb2.DeleteByKey<int, TableFieldDto>(11);

        var db1Result5 = await GridColumnDataIndexedDb2.GetAll<ImageDto>();

        //var db1Result6 = await GridColumnDataIndexedDb2.GetRange<int, TableFieldDto>(15, 20);

        //foreach (var item in db1Result5)
        //{
        //    item.FieldVisualName = item.FieldVisualName + "Updated";
        //}

        //var db1Result7a = await GridColumnDataIndexedDb2.UpdateItems<TableFieldDto>(db1Result5.ToList());

        //var db1Result8 = await GridColumnDataIndexedDb2.GetByIndex<int, TableFieldDto>(11, 18, "tableFieldId", true);

        var db1Result9 = await GridColumnDataIndexedDb2.GetByIndex<string, ImageDto>("image2.png", null, "imageName", false);

        //var testMaxKeyEmpty = await GridColumnDataIndexedDb2.GetMaxKey<int, TableFieldDto>();

        //var testMinKeyEmpty = await GridColumnDataIndexedDb2.GetMinKey<int, TableFieldDto>();

        //var testMaxIndexEmpty = await GridColumnDataIndexedDb2.GetMaxIndex<int, TableFieldDto>("tableFieldId");

        //var testMinIndexEmpty = await GridColumnDataIndexedDb2.GetMinIndex<int, TableFieldDto>("tableFieldId");

        var db1Result10 = await GridColumnDataIndexedDb2.DeleteAll<ImageDto>();

        var db1Result11 = await GridColumnDataIndexedDb2.DeleteIndexedDb();

        Console.Write("after deletion");
    }

}
