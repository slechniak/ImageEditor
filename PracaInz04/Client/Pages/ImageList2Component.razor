@page "/gallery"

@inject StateService SService
@inject IndexedDbContext IndexedDbContext
@inject IndexedDbManager IDbManager
@inject ImageProcessing ImageProc
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject LocalStorageManager LSManager
<div class="container-fluid h-100 overflow-auto py-2">
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-xl-4 g-4">
        <div class="col">
            <div class="card h-100">
                <img class="img-thumbnail" src="images/placeholder.svg" alt="Card image cap">
                <div class="card-body">
                    <UploadImageComponent @ref="uploadImageComponent"></UploadImageComponent>
                </div>
            </div>
        </div>
        @if(imageInfos2.Count != 0)
        {
            @foreach (var imageInfo in imageInfos2)
            {
                <div class="col">
                    <div class="card h-100">
                        <img class="card-img-top" style="image-rendering: pixelated;" src="@imageInfo.Thumbnail" alt="Card image cap">
                        <div class="card-body">
                            <p class="card-title lead fw-bold">@imageInfo.Name</p>
                            <p class="card-text my-2">Last modified: @imageInfo.Date</p>
                            <p class="card-text my-2">Dimensions: @imageInfo.Dimensions</p>
                            <p class="card-text my-2">Size: @($"{imageInfo.Size.ToString("0.00")}MB")</p>
                        </div>
                        <div class="card-footer">
							<div class="d-flex justify-content-center">
                                <button @onclick="() => uploadImageComponent.GoToEditor(imageInfo.Name, imageInfo.Id)" class="btn btn-dark flex-fill mx-1">Edit</button>
                                <button @onclick="() => ModalShowDownloadComponent(imageInfo.Id)" class="btn btn-dark flex-fill mx-1">Download</button>
                                <button @onclick="() => OnDelete(imageInfo.Id)" class="btn btn-dark flex-fill mx-1">Delete</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {

    private class ImageDetail
    {
        public string Thumbnail { get; set; }
        public string Name { get; set; }
        public string Date { get; set; }
        public string Dimensions { get; set; }
        public int Id { get; set; }
        public float Size { get; set; }
    }

    List<ImageResized2> resizedImages2 = new List<ImageResized2>();
    List<ImageDetail> imageInfos2 = new List<ImageDetail>();

    UploadImageComponent uploadImageComponent;
    [CascadingParameter] 
    public IModalService Modal { get; set; }

    public async Task OnDelete(int id)
    {
        await IDbManager.DeleteImageFromIDb(id);
        await LSManager.DeleteImageId();
        await LSManager.DeleteImageName();
        await LoadThumbnails();
        StateHasChanged();
    }

    private void ModalShowDownloadComponent(int imageId)
    {
        var parameters = new ModalParameters();
        parameters.Add("ImageId", imageId);
        Modal.Show<DownloadComponent>("Download image", parameters);
    }

    protected override async Task OnInitializedAsync()
    {
        var openDbResult = await IndexedDbContext.OpenIndexedDb();
        await LoadThumbnails();

        await base.OnInitializedAsync();
    }

    public async Task LoadThumbnails()
    {
        await SetResizedImages();
        await SetImageInfos();  
    }

    public async Task SetResizedImages()
    {
        resizedImages2 = await IndexedDbContext.GetAll<ImageResized2>();
        //Console.WriteLine("SetResizedImages ended");
    }

    public async Task SetImageInfos()
    {
        imageInfos2 = new List<ImageDetail>();
        foreach(var image in resizedImages2)
        {
            string src = await ImageProc.GetImageURL(image.Array);
            imageInfos2.Add(new ImageDetail()
            {
                Thumbnail = src,
                Name = image.Name,
                Date = image.Date,
                Dimensions = $"{image.OriginalWidth}x{image.OriginalHeight}",
                Id = (int)image.Id,
                Size = (float)image.OriginalSize/(1024*1024)
            });
        }
        //Console.WriteLine("SetImageInfos ended");
    }
}
