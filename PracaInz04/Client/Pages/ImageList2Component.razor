@*@page "/imagelist2"*@
@page "/gallery"

@inject StateService SService
@inject IndexedDbContext IndexedDbContext
@inject IndexedDbManager IDbManager
@inject ImageProcessing ImageProc
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject LocalStorageManager LSManager
@*<div class="card-deck">*@
<div class="container-fluid h-100 overflow-auto py-2">
    @*<div class="row row-cols-1 row-cols-sm-2 row-cols-lg-3 g-4">*@
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-xl-4 g-4">
        <div class="col">
            <div class="card h-100">
                @*<img class="card-img-top" src="https://upload.wikimedia.org/wikipedia/commons/3/3f/Placeholder_view_vector.svg" alt="Card image cap">*@
                @*<img class="card-img-top" src="images/placeholder.svg" alt="Card image cap">*@
                <img class="img-thumbnail" src="images/placeholder.svg" alt="Card image cap">
                <div class="card-body">
                    <UploadImageComponent @ref="uploadImageComponent"></UploadImageComponent>
                </div>
            </div>
        </div>
        @if(imageInfos2.Count != 0)
        {
            @foreach (var imageInfo in imageInfos2)
            {
                @*do sth with it*@
                <div class="col">
                    <div class="card h-100">
                        @*<img class="card-img-top" src="@imageInfo.Thumbnail" alt="Card image cap">*@
                        @*<img class="" style="object-fit: contain; max-height: 50%;" src="@imageInfo.Thumbnail" alt="Card image cap">*@
                        <img class="card-img-top" style="image-rendering: pixelated;" src="@imageInfo.Thumbnail" alt="Card image cap">
                        <div class="card-body">
                            <p class="card-title lead fw-bold">@imageInfo.Name</p>
                            <p class="card-text my-2">Last modified: @imageInfo.Date</p>
                            <p class="card-text my-2">Dimensions: @imageInfo.Dimensions</p>
                            <p class="card-text my-2">Size: @($"{imageInfo.Size.ToString("0.00")}MB")</p>
                        </div>
                        <div class="card-footer">
							<div class="d-flex justify-content-center">
                                <button @onclick="() => uploadImageComponent.GoToEditor(imageInfo.Name, imageInfo.Id)" class="btn btn-dark flex-fill mx-1">Edit</button>
                                <button @onclick="() => ModalShowDownloadComponent(imageInfo.Id)" class="btn btn-dark flex-fill mx-1">Download</button>
                                <button @onclick="() => OnDelete(imageInfo.Id)" class="btn btn-dark flex-fill mx-1">Delete</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <p>list is empty</p>
        }
        @*<div class="col">
            <div class="card">
                <img class="card-img-top" src="..." alt="Card image cap">
                <div class="card-body">
                    <h5 class="card-title">Upload an image</h5>
                    <p class="card-text">Description</p>
                    <UploadImageComponent @ref="uploadImageComponent"></UploadImageComponent>
                </div>
            </div>
        </div>*@
    </div>
</div>

@code {

    //List<ImageDto> imageDtoListResult = new List<ImageDto>();
    //List<string> srcImageList = new List<string>();
    //List<ImageInfo> thumbnailList = new List<ImageInfo>();
    private class ImageDetail
    {
        public string Thumbnail { get; set; }
        public string Name { get; set; }
        public string Date { get; set; }
        public string Dimensions { get; set; }
        public int Id { get; set; }
        public float Size { get; set; }
    }

    //List<ImageResized> resizedImages = new List<ImageResized>();
    List<ImageResized2> resizedImages2 = new List<ImageResized2>();
    //List<string> thumbnails = new List<string>();
    //List<(string thumbnail, string name)> imageInfos = new List<(string, string)>();
    List<ImageDetail> imageInfos2 = new List<ImageDetail>();

    UploadImageComponent uploadImageComponent;
    [CascadingParameter] 
    public IModalService Modal { get; set; }

    public async Task OnDelete(int id)
    {
        await IDbManager.DeleteImageFromIDb(id);
        await LSManager.DeleteImageId();
        await LSManager.DeleteImageName();
        await LoadThumbnails();
        StateHasChanged();
    }

    private void ModalShowDownloadComponent(int imageId)
    {
        var parameters = new ModalParameters();
        parameters.Add("ImageId", imageId);
        Modal.Show<DownloadComponent>("Download image", parameters);
    }

    protected override async Task OnInitializedAsync()
    {
        //is it getting called after state has changed?
        //check first render - connection?
        var openDbResult = await IndexedDbContext.OpenIndexedDb();
        await LoadThumbnails();

        await base.OnInitializedAsync();
    }

    public async Task LoadThumbnails()
    {
        await SetResizedImages();
        //await SetThumbnails();
        await SetImageInfos();  
    }

    public async Task SetResizedImages()
    {
        //resizedImages = await IndexedDbContext.GetAll<ImageResized>();
        resizedImages2 = await IndexedDbContext.GetAll<ImageResized2>();
        Console.WriteLine("SetResizedImages ended");
    }

    public async Task SetImageInfos()
    {
        //imageInfos = new List<(string, string)>();
        imageInfos2 = new List<ImageDetail>();
        //foreach(var image in resizedImages)
        //{
        //    string src = await ImageProc.GetImageURL(image.ImageArray);
        //    imageInfos.Add((src, image.ImageName));
        //}
        foreach(var image in resizedImages2)
        {
            string src = await ImageProc.GetImageURL(image.Array);
            imageInfos2.Add(new ImageDetail()
            {
                Thumbnail = src,
                Name = image.Name,
                Date = image.Date,
                Dimensions = $"{image.OriginalWidth}x{image.OriginalHeight}",
                Id = (int)image.Id,
                Size = (float)image.OriginalSize/(1024*1024)
            });
        }
        Console.WriteLine("SetImageInfos ended");
    }

    // code from idbtest

    // before UploadImageComponent (onfileupload and gotoeditor)
    //public async Task OnFileUpload(InputFileChangeEventArgs e)
    //{
    //    // get image array, content type, other data
    //    IBrowserFile imageFile = e.File;
    //    byte[] imageArray = new byte[imageFile.Size];
    //    await imageFile.OpenReadStream(1024*1024*10).ReadAsync(imageArray);
    //    string imageType = imageFile.ContentType;

    //    // add original and data to idb
    //    var addedResult = await IDbManager.AddImageDataToIDb(imageArray, imageFile.Name, imageType);
    //    Console.WriteLine($"data added: {imageFile.Name}");

    //    // add resized to idb
    //    var addedResult2 = await IDbManager.AddImageResizedToIDb(imageArray, imageFile.Name, imageType);
    //    Console.WriteLine($"data added: {imageFile.Name}");

    //    // pass image data to stateService/routing parameters
    //    // or trigger an onClick function and pass image data

    //    // go to editor
    //    //NavigationManager.NavigateTo("editor");
    //    GoToEditor(imageFile.Name);

    //    // load resized images and generate thumbnails
    //    //await LoadThumbnails();

    //    //StateHasChanged();
    //}

    //public async Task GoToEditor(string imageName)
    //{
    //    // save imageName to local storage
    //    await LSManager.SaveImageName(imageName);
    //    // save imageName to state service
    //    //SService.ImageName = imageName;
    //    //NavigationManager.NavigateTo($"editor/{imageName}");
    //    NavigationManager.NavigateTo($"editor");
    //}

    //public async Task SetThumbnails()
    //{
    //    thumbnails = new List<string>();
    //    foreach(var image in resizedImages)
    //    {
    //        string src = await ImageProc.GetImageURL(image.ImageArray);
    //        thumbnails.Add(src);
    //    }
    //    Console.WriteLine("SetThumbnails ended");
    //}

}
