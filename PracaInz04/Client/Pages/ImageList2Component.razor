@page "/imagelist2"

@inject StateService SService
@inject IndexedDbContext IndexedDbContext
@inject IndexedDbManager IDbManager
@inject ImageProcessing ImageProc
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject LocalStorageManager LSManager

<h3>ImageListComponent</h3>
<h6>List of images</h6>
    <div class="card-deck">
        <div class="row">
            @if(imageInfos.Count != 0)
            {
                <p>list is not empty</p>
                @foreach (var imageInfo in imageInfos)
                {
                    <div class="col-4">
                        <div class="card">
                            <img class="card-img-top" src="@imageInfo.thumbnail" alt="Card image cap">
                            <div class="card-body">
                                <h5 class="card-title">@imageInfo.name</h5>
                                <p class="card-text">Image details</p>
                                <button @onclick="() => GoToEditor(imageInfo.name)" class="btn btn-primary">Edit</button>
                                <button class="btn btn-primary">Save</button>
                                <button class="btn btn-primary">Delete</button>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <p>list is empty</p>
            }
            <div class="col-4">
                <div class="card">
                    <img class="card-img-top" src="..." alt="Card image cap">
                    <div class="card-body">
                        <h5 class="card-title">Upload an image</h5>
                        <p class="card-text">Description</p>
                        <div class="custom-file">
                            @*<InputFile OnChange="OnFileUpload"/>*@
                            <label class="custom-file-label" for="customFile">Choose file</label>
                            <InputFile OnChange="OnFileUpload" class="custom-file-input" id="customFile"/>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

@code {

    List<ImageDto> imageDtoListResult = new List<ImageDto>();
    List<string> srcImageList = new List<string>();
    List<ImageInfo> thumbnailList = new List<ImageInfo>();

    List<ImageResized> resizedImages = new List<ImageResized>();
    List<string> thumbnails = new List<string>();
    List<(string thumbnail,
          string name)> imageInfos = new List<(string, string)>();

    // old comment
    // make list of thumbnail images(strings) from imageDtoListResult
    protected override async Task OnInitializedAsync()
    {
        //is it getting called after state has changed?
        //check first render - connection?
        var openDbResult = await IndexedDbContext.OpenIndexedDb();
        await LoadThumbnails();

        await base.OnInitializedAsync();
    }

    // code from idbtest

    public async Task OnFileUpload(InputFileChangeEventArgs e)
    {
        // get image array, content type, other data
        IBrowserFile imageFile = e.File;
        byte[] imageArray = new byte[imageFile.Size];
        await imageFile.OpenReadStream(1024*1024*10).ReadAsync(imageArray);
        string imageType = imageFile.ContentType;

        // add original and data to idb
        var addedResult = await IDbManager.AddImageDataToIDb(imageArray, imageFile.Name, imageType);
        Console.WriteLine($"data added: {imageFile.Name}");

        // add resized to idb
        var addedResult2 = await IDbManager.AddImageResizedToIDb(imageArray, imageFile.Name, imageType);
        Console.WriteLine($"data added: {imageFile.Name}");

        // pass image data to stateService/routing parameters
        // or trigger an onClick function and pass image data

        // go to editor
        //NavigationManager.NavigateTo("editor");
        GoToEditor(imageFile.Name);

        // load resized images and generate thumbnails
        //await LoadThumbnails();

        //StateHasChanged();
    }

    public async Task GoToEditor(string imageName)
    {
        // save imageName to local storage
        await LSManager.SaveImageName(imageName);
        // save imageName to state service
        //SService.ImageName = imageName;
        //NavigationManager.NavigateTo($"editor/{imageName}");
        NavigationManager.NavigateTo($"editor");
    }

    public async Task SetResizedImages()
    {
        resizedImages = await IndexedDbContext.GetAll<ImageResized>();
        Console.WriteLine("SetResizedImages ended");
    }

    public async Task SetImageInfos()
    {
        imageInfos = new List<(string, string)>();
        foreach(var image in resizedImages)
        {
            string src = await ImageProc.GetImageURL(image.ImageArray);
            imageInfos.Add((src, image.ImageName));
        }
        Console.WriteLine("SetImageInfos ended");
    }

    public async Task LoadThumbnails()
    {
        await SetResizedImages();
        //await SetThumbnails();
        await SetImageInfos();  
    }

    //public async Task SetThumbnails()
    //{
    //    thumbnails = new List<string>();
    //    foreach(var image in resizedImages)
    //    {
    //        string src = await ImageProc.GetImageURL(image.ImageArray);
    //        thumbnails.Add(src);
    //    }
    //    Console.WriteLine("SetThumbnails ended");
    //}

}
