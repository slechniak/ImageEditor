@page "/gltest"
@using System.Diagnostics

@inject IJSRuntime JS
@inject StateService SService
@inject GridColumnDataIndexedDb2 GridColumnDataIndexedDb2

<h3>GLTestComponent</h3>
@*<button class="btn btn-primary" @onclick="TestImageProcessing">TestImageProcessing</button>*@
<button class="btn btn-primary" @onclick="() => ProcessAll(ResizeSkia)">ProcessAll(ResizeSkia)</button>
<button class="btn btn-primary" @onclick="() => ProcessAll(RotateSkia)">ProcessAll(RotateSkia)</button>
<br />
@if (imageArrayList != null && imageArrayList.Count != 0)
{
	<button class="btn btn-primary" @onclick="GenerateImageURLs">Generate images</button>
	@*<button class="btn btn-primary" @onclick="GenerateImages">Generate images</button>*@
	<br />
}
@if (imageSrcList != null && imageSrcList.Count != 0)
{
	@foreach(var imageSrc in imageSrcList)
	{
		<img src="@imageSrc" alt="alt text" width=400/>
		
	}
}
@*@if (imageSrcList != null)
{
	@foreach(var imageResult in imageSrcList)
	{
	<BECanvas Width="300" Height="400" @ref="_canvasReference" ></BECanvas>
	}
}*@

@code {

	//private Canvas2DContext _context;
	//protected BECanvasComponent _canvasReference;
	List<ImageDto> imageDtoListResult = new List<ImageDto>();
	List<byte[]> imageArrayList = new List<byte[]>();
	List<string> imageSrcList = new List<string>();

	protected override async Task OnInitializedAsync()
	{
		var openDbResult = await GridColumnDataIndexedDb2.OpenIndexedDb();
		await base.OnInitializedAsync();
	}

	// OnAfterRenderAsync
	//protected override async Task OnAfterRenderAsync(bool firstRender)
	//{
	//	this._context = await this._canvasReference.CreateCanvas2DAsync();
	//	await this._context.SetFillStyleAsync("green");

	//	await this._context.FillRectAsync(10, 100, 100, 100);
	//	await this._context.SetFontAsync("48px serif");
	//	await this._context.StrokeTextAsync("Hello Blazor!!!", 10, 100);
	//}

	public async Task SetImageDtoListIDb()
	{
		imageDtoListResult = await GridColumnDataIndexedDb2.GetAll<ImageDto>();
	}

	public async Task TestImageProcessing()
	{
		Console.WriteLine("Test started");
		await SetImageDtoListIDb();
		foreach(var imageDto in imageDtoListResult)
		{
			byte[] imageResult = await ProcessImage(imageDto.ImageArray);
			imageArrayList.Add(imageResult);
		}
		Console.WriteLine("Test ended");
	}

	public async Task<byte[]> ProcessImage(byte[] imageArray)
	{
		Console.WriteLine("{0} MB",Math.Round((float)imageArray.Length/(1024*1024),4));
		byte[] imageResult = new byte[]{};

		Stopwatch stopwatch = new Stopwatch();
		stopwatch.Start();

		//processing
		//imageResult = ResizeImageSharp(imageArray);
		imageResult = ResizeSkia(imageArray);

		stopwatch.Stop();
		Console.WriteLine("Elapsed Time is {0} ms\n....", stopwatch.ElapsedMilliseconds);

		return imageResult;
		//return new byte[]{};
	}

	public async Task ProcessAll(Func<byte[], byte[]> ProcessingFunc)
	{
		Console.WriteLine("Test started");
		await SetImageDtoListIDb();
		imageArrayList = new List<byte[]>();

		foreach(var imageDto in imageDtoListResult)
		{
			byte[] imageResult = await ProcessImageCustom(imageDto.ImageArray, ProcessingFunc);
			imageArrayList.Add(imageResult);
		}
		Console.WriteLine("Test ended");
	}

	public async Task<byte[]> ProcessImageCustom(byte[] imageArray, Func<byte[], byte[]> ProcessingFunc)
	{
		Console.WriteLine("{0} MB",Math.Round((float)imageArray.Length/(1024*1024),4));
		byte[] imageResult = new byte[]{};

		Stopwatch stopwatch = new Stopwatch();
		stopwatch.Start();

		//processing
		//imageResult = ResizeImageSharp(imageArray);
		imageResult = ProcessingFunc(imageArray);

		stopwatch.Stop();
		Console.WriteLine("Elapsed Time is {0} ms\n....", stopwatch.ElapsedMilliseconds);

		return imageResult;
		//return new byte[]{};
	}

	public byte[] ResizeImageSharp(byte[] imageArray, int width = 500)
	{
		byte[] imageResult = new byte[]{};
		using(Image image = Image.Load(imageArray, out var imageFormat))
		{
			image.Mutate(x => x.AutoOrient());
			//int height = (image.Height * width) / image.Width;
			//image.Mutate(x => x.Resize(width, height).AutoOrient());
			Console.WriteLine($"{image.Width} -> {width}");
			image.Mutate(x => x.Resize(width, 0));
			using (var ms = new MemoryStream())
			{
				image.Save(ms, imageFormat);
				imageResult = ms.ToArray();
			}
		}
		return imageResult;
	}

	public byte[] ResizeSkia(byte[] imageArray)
	{
		// rotate on upload
		//using(Image image = Image.Load(imageArray, out var imageFormat))
		//{
		//	image.Mutate(x => x.AutoOrient());
		//	using (var ms = new MemoryStream())
		//	{
		//		image.Save(ms, imageFormat);
		//		imageArray = ms.ToArray();
		//	}
		//}
		//
		int width = 500;
		byte[] imageResult = new byte[]{};
		using (SKBitmap sourceBitmap = SKBitmap.Decode(imageArray))
		{
			int height = (sourceBitmap.Height * width) / sourceBitmap.Width;
			var resultInfo = new SKImageInfo(width,height);
			SKBitmap resultBitmap = sourceBitmap.Resize(resultInfo, SKFilterQuality.High);
			// v1
			//using(var ms = new MemoryStream())
			//{
			//	resultBitmap.Encode(ms, SKEncodedImageFormat.Png, 100);
			//	imageResult = ms.ToArray();
			//}
			// v2 - BEST
			var skData = resultBitmap.Encode(SKEncodedImageFormat.Png, 100);
			imageResult = skData.ToArray();
			//v3
			//using(SKImage skImage = SKImage.FromBitmap(resultBitmap))
			//{
			//	var skData = skImage.Encode(SKEncodedImageFormat.Png, 100);
			//	imageResult = skData.ToArray();
			//}
		}

		return imageResult;
	}

	public byte[] RotateSkia(byte[] imageArray)
	{
		byte[] imageResult = new byte[] { };
		using SKBitmap bitmap = SKBitmap.Decode(imageArray);
		using SKBitmap rotatedBitmap = new SKBitmap(bitmap.Height, bitmap.Width);
		using (SKCanvas canvas = new SKCanvas(rotatedBitmap))
		{
			canvas.Clear();
			canvas.Translate(bitmap.Height, 0);
			canvas.RotateDegrees(90);
			canvas.DrawBitmap(bitmap, new SKPoint());
		}
		var skData = rotatedBitmap.Encode(SKEncodedImageFormat.Png, 100);
			imageResult = skData.ToArray();

		return imageResult;
	}

	public string GetImageSrc(byte[] imageArray)
	{
		string imgSrc;
		using(Image image = Image.Load(imageArray, out var imageFormat))
		{
			imgSrc = image.ToBase64String(imageFormat);
			//imgSrc = $"data:{imageType};base64,{Convert.ToBase64String(imageArray)}";
		}
		return imgSrc;
    }

	public void GenerateImages()
	{
		foreach (var imageArray in imageArrayList)
		{
			string imgSrc = GetImageSrc(imageArray);
			imageSrcList.Add(imgSrc);
			Console.WriteLine("{0} MB",(float)imageArray.Length/(1024*1024));
		}
		Console.WriteLine("Generating ended");
	}

	public async Task<string> GetImageURL(byte[] imageArray)
	{
		Console.WriteLine("start url");
		string imgSrc = string.Empty;
		//imgSrc = await JS.InvokeAsync<string>("URL.createObjectURL", imageArray);
		imgSrc = await JS.InvokeAsync<string>("createObjectURLFromBA", imageArray);
		Console.WriteLine("stop url");
		return imgSrc;
    }

	public async Task GenerateImageURLs()
	{
		imageSrcList = new List<string>();
		Console.WriteLine("Generating URLs started");
		foreach (var imageArray in imageArrayList)
		{
			string imgSrc = await GetImageURL(imageArray);
			imageSrcList.Add(imgSrc);
		}
		Console.WriteLine("Generating URLs ended");
	}

}
