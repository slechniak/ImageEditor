@page "/gltest"
@using System.Diagnostics

@inject IJSRuntime JS
@inject StateService SService
@inject IndexedDbContext IndexedDbContext

<h3>GLTestComponent</h3>
@*<button class="btn btn-primary" @onclick="TestImageProcessing">TestImageProcessing</button>*@
<button class="btn btn-primary" @onclick="() => ProcessAll(ResizeSkia)">ProcessAll(ResizeSkia)</button>
<button class="btn btn-primary" @onclick="() => ProcessAll(RotateSkia)">ProcessAll(RotateSkia)</button>
<br />
@if (imageArrayList != null && imageArrayList.Count != 0)
{
	<button class="btn btn-primary" @onclick="GenerateImageURLs">Generate images</button>
	@*<button class="btn btn-primary" @onclick="GenerateImages">Generate images</button>*@
	<br />
}
@if (imageSrcList != null && imageSrcList.Count != 0)
{
	@foreach(var imageSrc in imageSrcList)
	{
		<img src="@imageSrc" alt="alt text" width=400/>
		
	}
}
@*@if (imageSrcList != null)
{
	@foreach(var imageResult in imageSrcList)
	{
	<BECanvas Width="300" Height="400" @ref="_canvasReference" ></BECanvas>
	}
}*@

@code {

	//private Canvas2DContext _context;
	//protected BECanvasComponent _canvasReference;
	List<ImageDto> imageDtoListResult = new List<ImageDto>();
	List<byte[]> imageArrayList = new List<byte[]>();
	List<string> imageSrcList = new List<string>();

	protected override async Task OnInitializedAsync()
	{
		var openDbResult = await IndexedDbContext.OpenIndexedDb();
		await base.OnInitializedAsync();
	}

	// OnAfterRenderAsync
	//protected override async Task OnAfterRenderAsync(bool firstRender)
	//{
	//	this._context = await this._canvasReference.CreateCanvas2DAsync();
	//	await this._context.SetFillStyleAsync("green");

	//	await this._context.FillRectAsync(10, 100, 100, 100);
	//	await this._context.SetFontAsync("48px serif");
	//	await this._context.StrokeTextAsync("Hello Blazor!!!", 10, 100);
	//}

	public async Task SetImageDtoListIDb()
	{
		imageDtoListResult = await IndexedDbContext.GetAll<ImageDto>();
	}

	public async Task ProcessAll(Func<byte[], byte[]> ProcessingFunc)
	{
		Console.WriteLine("Test started");
		await SetImageDtoListIDb();
		imageArrayList = new List<byte[]>();

		foreach(var imageDto in imageDtoListResult)
		{
			byte[] imageResult = await ProcessImageCustom(imageDto.ImageArray, ProcessingFunc);
			imageArrayList.Add(imageResult);
		}
		Console.WriteLine("Test ended");
	}

	public async Task<byte[]> ProcessImageCustom(byte[] imageArray, Func<byte[], byte[]> ProcessingFunc)
	{
		Console.WriteLine("{0} MB",Math.Round((float)imageArray.Length/(1024*1024),4));
		byte[] imageResult = new byte[]{};

		Stopwatch stopwatch = new Stopwatch();
		stopwatch.Start();

		//processing
		//imageResult = ResizeImageSharp(imageArray);
		imageResult = ProcessingFunc(imageArray);

		stopwatch.Stop();
		Console.WriteLine("Elapsed Time is {0} ms\n....", stopwatch.ElapsedMilliseconds);

		return imageResult;
		//return new byte[]{};
	}

	public async Task GenerateImageURLs()
	{
		imageSrcList = new List<string>();
		Console.WriteLine("Generating URLs started");
		foreach (var imageArray in imageArrayList)
		{
			string imgSrc = await GetImageURL(imageArray);
			imageSrcList.Add(imgSrc);
		}
		Console.WriteLine("Generating URLs ended");
	}

	// slow
	public void GenerateImages()
	{
		foreach (var imageArray in imageArrayList)
		{
			string imgSrc = GetImageSrc(imageArray);
			imageSrcList.Add(imgSrc);
			Console.WriteLine("{0} MB", (float)imageArray.Length / (1024 * 1024));
		}
		Console.WriteLine("Generating ended");
	}

}
