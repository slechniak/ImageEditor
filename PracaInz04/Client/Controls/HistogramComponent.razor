@using Radzen.Blazor

<div class="w-100 border border-success ps-2 my-2">
	<RadzenChart ColorScheme="ColorScheme.Monochrome" Style="width: 100%; aspect-ratio: 16/9; height: auto;">
      <RadzenColumnSeries Data="@histogram" CategoryProperty="Value" StrokeWidth="1" ValueProperty="Count" Title="Red">
          <TooltipTemplate Context="data">
              <div>
                Value: <strong>@data.Value</strong>
                <br />
                % of values: <strong>@Percent(data.Count)</strong>%
              </div>
          </TooltipTemplate>
      </RadzenColumnSeries>
  
      <RadzenCategoryAxis Max="255" Step="50">
      </RadzenCategoryAxis>
  
      <RadzenValueAxis Min="0" Step="@step" Formatter="@Percent">
          <RadzenGridLines Visible="true"/>
      </RadzenValueAxis>

      <RadzenLegend Visible="false" />
    </RadzenChart>
</div>

@code {

    //<RadzenValueAxis Min="0" Step="500" >
    //<RadzenColumnSeries Data="@histogram" CategoryProperty="Value" ValueProperty="Count"
    //  Title="Red" Stroke="rgba(0,0,0,1)" Fill="rgba(0,0,0,1)">
    class HistogramItem
    {
        public byte Value { get; set; }
        public int Count { get; set; }
    }

    HistogramItem[] histogram;
    int pixelsLength;
    int step;

    [Parameter]
    public int[] HistogramArray { get; set; }        

    private string Percent(int value)
    {
        //Console.WriteLine($"{value}, {pixelsLength}, {Math.Round((double)value / pixelsLength * 100)}");
        return Math.Round((double)value / pixelsLength * 100, 2).ToString();
    }

    private string Percent(object value)
    {
        //Console.WriteLine($"{value}, {pixelsLength}, {Math.Round((double)value / pixelsLength * 100)}");
        return Math.Round((double)value / pixelsLength * 100, 2).ToString();
    }

    private byte[] GetPixels(int width, int height)
    {
        Random rand = new Random();
        byte[] pixels = new byte[width * height];
        for (int i = 0; i < pixels.Length; i++)
        {
            // 0 - 255
            //pixels[i] = (byte)rand.Next(256);
            pixels[i] = NextGaussian(rand);
        }
        return pixels;
    }

    private HistogramItem[] GetHistogram(byte[] pixels)
    {
        HistogramItem[] resultH = new HistogramItem[256];

        int[] array = new int[256];
        for (int i = 0; i < pixels.Length; i++)
        {
            array[pixels[i]]++;
        }

        //step = array.Max() / 4;

        for (int i = 0; i < resultH.Length; i++)
        {
            resultH[i] = new HistogramItem
            {
                Value = (byte)i,
                Count = array[i]
                //Count = (int)Math.Round((float)array[i] / pixelsLength * 100)
            };
        }

        return resultH;
    }

    private void Gaussian()
    {
        Random rand = new Random(); //reuse this if you are generating many
        double[] rands = new double[1000];
        for (int i = 0; i < 1000; i++)
        {
            rands[i] = NextGaussian(rand);
        }
    }

    private byte NextGaussian(Random rand)
    {
        double mean = 0;
        double stdDev = 1;
        double u1 = 1.0-rand.NextDouble(); //uniform(0,1] random doubles
        double u2 = 1.0-rand.NextDouble();
        double randStdNormal = Math.Sqrt(-2.0 * Math.Log(u1)) *
                        Math.Sin(2.0 * Math.PI * u2); //random normal(0,1)
        double randNormal = mean + stdDev * randStdNormal; //random normal(mean,stdDev^2)
        double max = -3.5 * stdDev;
        double min = 3.5 * stdDev;
        double result = (randNormal - min) / (max - min) * 255;
        return (byte)Math.Clamp(result, 0, 255);
    }

    protected override void OnInitialized()
    {
        byte[] pixels = GetPixels(100, 200);
        pixelsLength = pixels.Length;
        histogram = GetHistogram(pixels);
        step = histogram.Select(x => x.Count).Max() / 4;
        //Gaussian();
    }
}
