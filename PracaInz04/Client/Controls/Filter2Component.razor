@using static PracaInz04.Client.ImageProcessingClasses.ImageProcessing
@inject StateService SService
@inject ImageProcessing ImageProc

<p class="fs-6 fw-bold m-2">Filters</p>
<div class="input-group m-2 w-75">
    <span class="input-group-text bg-dark text-light border-0">Filter:</span>
    <select @onchange="OnFilterChosen" class="form-select bg-dark text-light border-0 border-start">
        <option value="" selected>None</option>
        @foreach(var fType in filterTypeList)
        {
            <option value=@fType>
                @switch((FilterType)fType)
                {
                    case FilterType.EqualizeHistogram:
                        @:Equalize histogram
                        break;
                    case FilterType.StretchHistogram:
                        @:Stretch histogram
                        break;
                    case FilterType.EdgeDetect:
                        @:Edge detection
                        break;
                    case FilterType.SobelVertical:
                        @:Sobel vertical
                        break;
                    case FilterType.SobelHorizontal:
                        @:Sobel horizontal
                        break;
                     case FilterType.Median:
                        @:Median (slow)
                        break;
                    default:
                        @fType
                        break;
                }
            </option>
        }
    </select>
</div>

@if(filterType == FilterType.Binary)
{
    <label for="customRange1" class="form-label pt-2 px-2">Treshold</label>
    <input 
        value="@treshold" @oninput="OnTresholdChange"
        min="@minTreshold" max="@maxTreshold"
        type="range" class="form-range m-2 w-75" id="customRange1">
    <input 
        value="@treshold" @onchange="OnTresholdChange"
        type="number" class="form-control m-2 w-25" id="formControlInput1">
}
@if(filterType == FilterType.Brightness || filterType == FilterType.Opacity)
{
    <label for="customRange2" class="form-label pt-2 px-2">Level</label>
    <input 
        value="@level" @oninput="OnLevelChange"
        min="@minLevel" max="@maxLevel"
        type="range" class="form-range m-2 w-75" id="customRange2">
    <input 
        value="@level" @onchange="OnLevelChange"
        type="number" class="form-control m-2 w-25" id="formControlInput2">
}
@if(filterType == FilterType.Contrast)
{
    <label for="customRange3" class="form-label pt-2 px-2">Factor</label>
    <input 
        value="@factor" @oninput="OnFactorChange"
        min="@minFactor" max="@maxFactor"
        type="range" class="form-range m-2 w-75" id="customRange3">
    <div class="form-check m-2">
        <input class="form-check-input" type="checkbox" value="@inColor" id="flexCheckChecked"
            @onchange="OnInColorChange">
        <label class="form-check-label" for="flexCheckChecked">Color</label>
    </div>
    <input 
        value="@factor" @onchange="OnFactorChange"
        type="number" class="form-control m-2 w-25" id="formControlInput3">
}
@if(filterType == FilterType.StretchHistogram)
{
    <label for="customRange4" class="form-label pt-2 px-2">Percentile cut</label>
    <input 
        value="@cutoff" @oninput="OnCutoffChange"
        min="@minCutoff" max="@maxCutoff"
        type="range" class="form-range m-2 w-75" id="customRange4">
    <input 
        value="@cutoff" @onchange="OnCutoffChange"
        type="number" class="form-control m-2 w-25" id="formControlInput4">
}
@if(filterType == FilterType.Average)
{
    <label for="customRange5" class="form-label pt-2 px-2">Kernel size: @kernelSize</label>
    <input 
        value="@kernelSize" @oninput="OnKernelSizeChange"
        min="@minKernel" max="@maxKernel" step="2"
        type="range" class="form-range m-2 w-75" id="customRange5">
    
}

@if(filterType == FilterType.Gaussian)
{
    <label for="customRange7" class="form-label pt-2 px-2">Kernel size: @gaussSize2</label>
    <input 
        value="@gaussSize2" @oninput="OnKernelGauss2Change"
        min="@minKernelGauss2" max="@maxKernelGauss2" step="2"
        type="range" class="form-range m-2 w-75" id="customRange7">
    <label for="customRange8" class="form-label pt-2 px-2">Sigma: @sigma</label>
    <input 
        value="@sigma" @oninput="OnSigmaChange"
        min="@minSigma" max="@maxSigma" step="0.1"
        type="range" class="form-range m-2 w-75" id="customRange8">
}
@if(filterType == FilterType.Median)
{
    <label for="customRange9" class="form-label pt-2 px-2">Kernel size: @medianKernel</label>
    <input 
        value="@medianKernel" @oninput="OnMedianKernelChange"
        min="@minMedianKernel" max="@maxMedianKernel" step="2"
        type="range" class="form-range m-2 w-75" id="customRange9">
}
@if(filterType == FilterType.Erosion || filterType == FilterType.Dilation)
{
    <label for="customRange10" class="form-label pt-2 px-2">Kernel radius: @radius</label>
    <input 
        value="@radius" @oninput="OnRadiusChange"
        min="@minRadius" max="@maxRadius" step="1"
        type="range" class="form-range m-2 w-75" id="customRange10">
}
@if(new List<FilterType?>{ FilterType.Sharpen, FilterType.EdgeDetect,FilterType.Emboss, FilterType.SobelVertical,
    FilterType.SobelHorizontal, FilterType.Custom}.Contains(filterType))
{
    <table class="table table-sm table-borderless w-75">
      <tbody>
        <tr>
          <td><input @bind="customKernel[0]" @bind:event="oninput" type="number" class="form-control"></td>
          <td><input @bind="customKernel[1]" @bind:event="oninput" type="number" class="form-control"></td>
          <td><input @bind="customKernel[2]" @bind:event="oninput" type="number" class="form-control"></td>
        </tr>
        <tr>
          <td><input @bind="customKernel[3]" @bind:event="oninput" type="number" class="form-control"></td>
          <td><input @bind="customKernel[4]" @bind:event="oninput" type="number" class="form-control"></td>
          <td><input @bind="customKernel[5]" @bind:event="oninput" type="number" class="form-control"></td>
        </tr>
        <tr>
          <td><input @bind="customKernel[6]" @bind:event="oninput" type="number" class="form-control"></td>
          <td><input @bind="customKernel[7]" @bind:event="oninput" type="number" class="form-control"></td>
          <td><input @bind="customKernel[8]" @bind:event="oninput" type="number" class="form-control"></td>
        </tr>
      </tbody>
    </table>
    <button @onclick="CustomKernelFilter" class="btn btn-dark m-2">Use custom kernel</button>
}
<button @onclick="ApplyFilter" class="btn btn-dark w-50 my-2">Save changes</button>

@code {
    [Parameter]
    public EventCallback<SKBitmap> AddBitmap { get; set; }
    [Parameter]
    public EventCallback<SKBitmap> ShowBitmap { get; set; }
    public Array filterTypeList;
    public FilterType? filterType;
    public int treshold = 128;
    public int minTreshold = 0;
    public int maxTreshold = 255;

    public int level = 0;
    public int minLevel = -255;
    public int maxLevel = 255;

    public int factor = 0;
    public int minFactor = -255;
    public int maxFactor = 255;
    public bool inColor = false;

    public int cutoff = 0;
    public int minCutoff = 0;
    public int maxCutoff = 49;

    public int kernelSize = 3;
    public int minKernel = 1;
    public int maxKernel = 11;

    public int gaussSize = 3;
    public int minKernelGauss = 3;
    public int maxKernelGauss = 5;

    public int gaussSize2 = 3;
    public int minKernelGauss2 = 1;
    public int maxKernelGauss2 = 11;

    public float sigma = 1;
    public float minSigma = 0.1f;
    public float maxSigma = 10;

    public int medianKernel = 3;
    public int minMedianKernel = 1;
    public int maxMedianKernel = 11;

    public int radius = 1;
    public int minRadius = 1;
    public int maxRadius = 11;

    public float[] customKernel = new float[9];

    SKBitmap result;


    public async Task ApplyFilter()
    {
        await ShowBitmap.InvokeAsync(result);
        await AddBitmap.InvokeAsync(result);
    }

    public async Task ShowPixels(SKBitmap bitmap, string title)
    {
        SKColor[] pixels = bitmap.Pixels;
        int k = 0;
        string str = title;
        string toCopy = "";
        for (int i = 0; i < bitmap.Width; i++)
        {
            for (int j = 0; j < bitmap.Height; j++)
            {
                str += $"[{i},{j}]:{pixels[k].Red}, ";
                toCopy += $"{pixels[k].Red}+";
                k++;
            }
            str += "\n";
            toCopy += ";";
        }
        ////Console.WriteLine(str);
        //Console.WriteLine(toCopy);
    }

    public async Task FilterAndShow()
    {
        result = SService.bitmap.Copy();
        switch (filterType)
        {
            case ImageProcessing.FilterType.Grayscale:
                result = ImageProc.FilterGrayscale(result);
                break;
            case ImageProcessing.FilterType.Binary:
                result = ImageProc.FilterBinary(result, treshold);
                break;
            case ImageProcessing.FilterType.Brightness:
                result = ImageProc.FilterBrightness(result, level);
                break;
            case ImageProcessing.FilterType.Contrast:
                result = ImageProc.FilterContrast(result, factor, inColor);
                break;
            case ImageProcessing.FilterType.Negative:
                result = ImageProc.FilterNegative(result);
                break;
            case ImageProcessing.FilterType.EqualizeHistogram:
                result = ImageProc.EqualizeHistogram(result);
                break;
            case ImageProcessing.FilterType.StretchHistogram:
                result = ImageProc.StretchHistogram(result, cutoff);
                break;
            case ImageProcessing.FilterType.Average:
                result = ImageProc.FilterAverage(result, kernelSize);
                break;
            case ImageProcessing.FilterType.Sharpen:
                result = ImageProc.FilterSharpen(result);
                customKernel = ImageProc.SharpenKernel();
                break;
            case ImageProcessing.FilterType.Gaussian:
                //Console.WriteLine($"gausSize2: {gaussSize2}, sigma: {sigma}");
                result = ImageProc.FilterGaussian2(result, gaussSize2, sigma);
                break;
            case ImageProcessing.FilterType.EdgeDetect:
                result = ImageProc.FilterEdgeDetect(result);
                customKernel = ImageProc.EdgeDetectKernel();
                break;
            case ImageProcessing.FilterType.Emboss:
                result = ImageProc.FilterEmboss(result);
                customKernel = ImageProc.EmbossKernel();
                break;
            case ImageProcessing.FilterType.SobelVertical:
                result = ImageProc.FilterSobelVertical(result);
                customKernel = ImageProc.SobelVerticalKernel();
                break;
            case ImageProcessing.FilterType.SobelHorizontal:
                result = ImageProc.FilterSobelHorizontal(result);
                customKernel = ImageProc.SobelHorizontalKernel();
                break;
            case ImageProcessing.FilterType.Inferno:
                result = ImageProc.FilterInferno(result);
                break;
            case ImageProcessing.FilterType.Turbo:
                result = ImageProc.FilterTurbo(result);
                break;
            case ImageProcessing.FilterType.Median:
                result = ImageProc.FilterMedian(result, medianKernel);
                break;
            case ImageProcessing.FilterType.Erosion:
                result = ImageProc.FilterErode(result, radius);
                break;
            case ImageProcessing.FilterType.Dilation:
                result = ImageProc.FilterDilate(result, radius);
                break;
            case ImageProcessing.FilterType.Opacity:
                result = ImageProc.FilterOpacity(result, level);
                break;
            case ImageProcessing.FilterType.Custom:
                result = ImageProc.FilterCustom(result, customKernel);
                break;
        }
        
        await ShowBitmap.InvokeAsync(result);
    }

    protected override void OnInitialized()
    {
        result = SService.bitmap?.Copy();
        filterTypeList = Enum.GetValues(typeof(FilterType));
        customKernel = ImageProc.IdentityKernel();
    }

    public async Task OnFilterChosen(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            if(Enum.TryParse((string)e.Value, out FilterType enumVal))
            {
                filterType = enumVal;
                SService.newBitmap = true;
                await FilterAndShow();
            }
            else
            {
                filterType = null;
                await ShowBitmap.InvokeAsync(SService.bitmap.Copy());
            }
        }
    }

    private async Task OnTresholdChange(ChangeEventArgs e)
    {
        treshold = Convert.ToInt32(e.Value);
        treshold = Math.Clamp(treshold, minTreshold, maxTreshold);
        await FilterAndShow();
    }

    private async Task OnLevelChange(ChangeEventArgs e)
    {
        level = Convert.ToInt32(e.Value);
        level = Math.Clamp(level, minLevel, maxLevel);
        await FilterAndShow();
    }

    private async Task OnFactorChange(ChangeEventArgs e)
    {
        factor = Convert.ToInt32(e.Value);
        factor = Math.Clamp(factor, minFactor, maxFactor);
        await FilterAndShow();
    }

    private async Task OnCutoffChange(ChangeEventArgs e)
    {
        cutoff = Convert.ToInt32(e.Value);
        cutoff = Math.Clamp(cutoff, minCutoff, maxCutoff);
        await FilterAndShow();
    }

    private async Task OnKernelSizeChange(ChangeEventArgs e)
    {
        kernelSize = Convert.ToInt32(e.Value);
        kernelSize = Math.Clamp(kernelSize, minKernel, maxKernel);
        if (kernelSize % 2 != 0)
            await FilterAndShow();
        //else
            //Console.WriteLine($"even kernel size {kernelSize}");
    }

    private async Task OnKernelGaussChange(ChangeEventArgs e)
    {
        gaussSize = Convert.ToInt32(e.Value);
        gaussSize = Math.Clamp(gaussSize, minKernelGauss, maxKernelGauss);
        if (gaussSize % 2 != 0)
            await FilterAndShow();
        //else
            //Console.WriteLine($"even kernel size {gaussSize}");
    }

    private async Task OnKernelGauss2Change(ChangeEventArgs e)
    {
        gaussSize2 = Convert.ToInt32(e.Value);
        gaussSize2 = Math.Clamp(gaussSize2, minKernelGauss2, maxKernelGauss2);
        if (gaussSize2 % 2 != 0)
            await FilterAndShow();
        //else
            //Console.WriteLine($"even kernel size {gaussSize2}");
    }

    private async Task OnMedianKernelChange(ChangeEventArgs e)
    {
        medianKernel = Convert.ToInt32(e.Value);
        medianKernel = Math.Clamp(medianKernel, minMedianKernel, maxMedianKernel);
        if (medianKernel % 2 != 0)
            await FilterAndShow();
        //else
            //Console.WriteLine($"even kernel size {gaussSize2}");
    }

    private async Task OnSigmaChange(ChangeEventArgs e)
    {
        sigma = (float)Convert.ToDouble(e.Value);
        sigma = Math.Clamp(sigma, minSigma, maxSigma);
        await FilterAndShow();
    }

    private async Task OnRadiusChange(ChangeEventArgs e)
    {
        radius = Convert.ToInt32(e.Value);
        radius = Math.Clamp(radius, minRadius, maxRadius);
        await FilterAndShow();
    }

    private async Task CustomKernelFilter()
    {
        string str = "customKernel:\n";
        for (int i = 0; i < customKernel.Length; i++)
        {
            str += $"{customKernel[i]}, ";
        }
        //Console.WriteLine(str);
        filterType = FilterType.Custom;
        await FilterAndShow();
    }

    private async Task OnInColorChange(ChangeEventArgs e)
    {
        inColor = !inColor;
        if(inColor)
        {
            minFactor = -100;
            maxFactor = 100;
        }
        else
        {
            minFactor = -255;
            maxFactor = 255;
        }
        SService.newBitmap = true;
        factor = 0;
        await FilterAndShow();
    }
}